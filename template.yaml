AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Websocket notification center demo

Parameters:
  TableName:
    Type: String
    Default: user_session
  SecondaryIndexName:
    Type: String
    Default: 'UserID'
  Issuer:
    Type: String
    Default: 'issuer'

Globals:
  Function:
    Timeout: 5
    Runtime: python3.8
    Tracing: Active
    # Architectures:
    #   - arm64
    Layers:
      - !Ref DependencyLayer
    Handler: index.handler

Resources:
  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: python3.8
    Properties:
      LayerName: websocket-layer
      ContentUri: layers/
      CompatibleRuntimes:
        - python3.8

  UserSessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: UserID
          AttributeType: S
        - AttributeName: UserSK
          AttributeType: S
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      GlobalSecondaryIndexes:
        - IndexName: !Ref SecondaryIndexName
          KeySchema:
            - AttributeName: UserID
              KeyType: HASH
            - AttributeName: UserSK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
  
  WebsocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebsocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: WebSocketAuthorizer
      ApiId: !Ref WebsocketApi
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AuthorizerFunction/invocations
      AuthorizerCredentialsArn: !GetAtt AuthorizerExecutionRole.Arn
      IdentitySource:
        - route.request.header.Sec-WebSocket-Protocol

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AuthorizerFunction
      CodeUri: lambdas/authorizer
      Environment:
        Variables:
          ISSUER: !Ref Issuer
      Policies:
        - AWSLambdaBasicExecutionRole
  
  AuthorizerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: InvokeAuthorizer
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - lambda:InvokeFunction
                Resource: !GetAtt AuthorizerFunction.Arn
  
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebSocketAuthorizer
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectIntegration

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateConnectionFunction.Arn}/invocations

  CreateConnectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/create-socket-connection
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          TTL_HOURS: 24
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt UserSessionTable.Arn

  ConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateConnectionFunction
      Principal: apigateway.amazonaws.com

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectIntegration

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteConnectionFunction.Arn}/invocations

  DeleteConnectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/delete-socket-connection
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          ENDPOINT: !Join [ '', [ 'https://', !Ref WebsocketApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/dev'] ]
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:Query
              Resource: !GetAtt UserSessionTable.Arn
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: 
                - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketApi}/*
  
  DisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteConnectionFunction
      Principal: apigateway.amazonaws.com

  # DeleteSubscriptionRoute:
  #   Type: AWS::ApiGatewayV2::Route
  #   Properties:
  #     ApiId: !Ref WebsocketApi
  #     RouteKey: unsubscribe 
  #     AuthorizationType: NONE
  #     OperationName: DeleteSubscriptionRoute
  #     Target: !Join
  #       - '/'
  #       - - 'integrations'
  #         - !Ref DeleteSubscriptionIntegration

  # DeleteSubscriptionIntegration:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref WebsocketApi
  #     Description: Unsubscribe Integration
  #     IntegrationType: AWS_PROXY
  #     IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteSubscriptionFunction.Arn}/invocations

  ## create / delete subscriptions - only save connection id
  # DeleteSubscriptionFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: lambdas/delete-subscription
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref TableName
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - Version: 2012-10-17
  #         Statement:
  #           - Effect: Allow
  #             Action:
  #               - dynamodb:DeleteItem
  #             Resource: !GetAtt UserSessionTable.Arn

  # DeleteSubscriptionPermission:
  #   Type: AWS::Lambda::Permission
  #   DependsOn:
  #     - WebsocketApi
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref DeleteSubscriptionFunction
  #     Principal: apigateway.amazonaws.com

  # CreateSubscriptionRoute:
  #   Type: AWS::ApiGatewayV2::Route
  #   Properties:
  #     ApiId: !Ref WebsocketApi
  #     RouteKey: subscribe
  #     AuthorizationType: NONE
  #     OperationName: CreateSubscriptionRoute
  #     Target: !Join
  #       - '/'
  #       - - 'integrations'
  #         - !Ref CreateSubscriptionIntegration

  # CreateSubscriptionIntegration:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref WebsocketApi
  #     Description: Subscribe Integration
  #     IntegrationType: AWS_PROXY
  #     IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateSubscriptionFunction.Arn}/invocations

  # CreateSubscriptionFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: lambdas/create-subscription
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref TableName
  #         TTL_HOURS: 24
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - Version: 2012-10-17
  #         Statement:
  #           - Effect: Allow
  #             Action:
  #               - dynamodb:PutItem
  #               - dynamodb:GetItem
  #             Resource: !GetAtt UserSessionTable.Arn

  # CreateSubscriptionPermission:
  #   Type: AWS::Lambda::Permission
  #   DependsOn:
  #     - WebsocketApi
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref CreateSubscriptionFunction
  #     Principal: apigateway.amazonaws.com

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: dev
      Description: Deployment Stage for Websocket api
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebsocketApi

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    # - CreateSubscriptionRoute
    # - DeleteSubscriptionRoute
    Properties:
      ApiId: !Ref WebsocketApi

  # NotifySubscribersFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: lambdas/notify-subscribers
  #     Events:
  #       NotifySubscribersQueueEvent:
  #         Type: SQS
  #         Properties:
  #           Queue: !GetAtt NotifySubscribersQueue.Arn
  #     EventInvokeConfig:
  #       MaximumRetryAttempts: 2
  #       DestinationConfig:
  #         OnFailure:
  #           Type: SQS
  #           Destination: !GetAtt NotifySubscribersDLQ.Arn
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref TableName
  #         INDEX_NAME: !Ref SecondaryIndexName
  #         ENDPOINT: !Join [ '', [ 'https://', !Ref WebsocketApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/dev'] ]
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - AWSLambdaSQSQueueExecutionRole
  #       - Version: 2012-10-17
  #         Statement:
  #           - Effect: Allow
  #             Action:
  #               - dynamodb:Query
  #             Resource:
  #               !Join ['/', [ !GetAtt UserSessionTable.Arn, 'index', !Ref SecondaryIndexName] ]
  #           - Effect: Allow
  #             Action:
  #               - execute-api:ManageConnections
  #             Resource: 
  #               - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketApi}/*
  
  # NotifySubscribersQueue:
  #   Type: AWS::SQS::Queue

  # NotifySubscribersDLQ:
  #   Type: AWS::SQS::Queue

  # NotifySubscribersEventBridgeRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Description: Send notification to subscribers
  #     EventPattern:
  #       detail-type:
  #         - Notify Subscribers
  #     Targets:
  #       - Id: NotifySubscribersQueue
  #         Arn: !GetAtt NotifySubscribersQueue.Arn
  #         DeadLetterConfig:
  #           Arn: !GetAtt NotifySubscribersDLQ.Arn
            
  EventBridgeNotificationQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: SQS:SendMessage
          Resource: 
            # - !GetAtt NotifySubscribersQueue.Arn
            - !GetAtt NotifyUsersQueue.Arn
      Queues:
        # - Ref: NotifySubscribersQueue
        - Ref: NotifyUsersQueue

  # NotifySubscribersDLQAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmDescription: Alarm if Notify Subscribers DLQ has messages
  #     Namespace: AWS/SQS
  #     MetricName: ApproximateNumberOfMessagesVisible
  #     Dimensions:
  #     - Name: QueueName
  #       Value: !GetAtt NotifySubscribersDLQ.QueueName
  #     Statistic: Sum
  #     Period: 60
  #     EvaluationPeriods: 1
  #     Threshold: 1
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     AlarmActions:
  #     - !Ref DLQAlarmTopic
  #     TreatMissingData: notBreaching

  DLQAlarmTopic:
    Type: AWS::SNS::Topic

  NotifyUsersQueue:
    Type: AWS::SQS::Queue

  NotifyUsersDLQ:
    Type: AWS::SQS::Queue

  NotifyUsersEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Send a push notification to a specific user if they are connected
      EventPattern:
        detail-type:
          - Send User Push Notification
      Targets:
        - Id: NotifyUsersQueue
          Arn: !GetAtt NotifyUsersQueue.Arn
          DeadLetterConfig:
            Arn: !GetAtt NotifyUsersDLQ.Arn

  NotifyUsersDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if Notify Users DLQ has messages
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
      - Name: QueueName
        Value: !GetAtt NotifyUsersDLQ.QueueName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
      - !Ref DLQAlarmTopic
      TreatMissingData: notBreaching

  NotifyUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/notify-users
      Events:
        EntityUpdatedQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt NotifyUsersQueue.Arn
      EventInvokeConfig:
        MaximumRetryAttempts: 2
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt NotifyUsersDLQ.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          INDEX_NAME: !Ref SecondaryIndexName
          ENDPOINT: !Join [ '', [ 'https://', !Ref WebsocketApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/dev'] ]
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaSQSQueueExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: "*"
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: 
                - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketApi}/*

Outputs:
  WebsocketUri:
    Description: The WSS Protocol Uri to connect to
    Value: !Join [ '', [ 'wss://', !Ref WebsocketApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/dev'] ]